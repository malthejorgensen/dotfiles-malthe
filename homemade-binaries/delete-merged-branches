#!/usr/bin/env fish

function delete_merged_branches
    set -l current_branch (git branch --show-current)
    set -l default_branch (git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
    
    if test -z "$default_branch"
        echo "Error: Could not determine default branch. Trying common defaults..."
        for branch in main master
            if git show-ref --verify --quiet refs/remotes/origin/$branch
                set default_branch $branch
                break
            end
            if test -z "$default_branch"
                if git show-ref --verify --quiet refs/heads/$branch
                    set default_branch $branch
                    break
                end
            end
        end
        
        if test -z "$default_branch"
            echo "Error: Could not determine default branch"
            return 1
        end
    end
    
    echo "Using default branch: $default_branch"
    echo "Current branch: $current_branch"
    echo
    
    # Fetch latest from remote
    echo "Fetching latest from remote..."
    git fetch --prune
    
    set -l merged_branches
    # # Get branches merged into the default branch
    # echo
    # echo "Finding branches merged into $default_branch..."
    # set -l merged_branches (git branch --merged origin/$default_branch | grep -v "^\*" | grep -v $default_branch | string trim)
    # 
    # if test (count $merged_branches) -eq 0
    #     echo "No merged branches found."
    # else
    #     echo "Branches merged into $default_branch:"
    #     for branch in $merged_branches
    #         echo "  - $branch"
    #     end
    # end
    
    # Check for branches with merged PRs (GitHub)
    echo
    echo "Checking for branches with merged PRs..."
    set -l all_local_branches (git branch | grep -v "^\*" | string trim)
    set -l pr_merged_branches
    
    if command -v gh >/dev/null 2>&1
        for branch in $all_local_branches
            # Skip if already in merged branches
            if contains $branch $merged_branches
                continue
            end

            # Skip if default branch
            if test "$default_branch" = "$branch"
                continue
            end
            
            # Check if branch has an associated PR that's been merged
            set -l pr_info (gh pr list --state merged --head $branch --json number,title,mergedAt 2>/dev/null)
            if test -n "$pr_info" -a "$pr_info" != "[]"
                set pr_merged_branches $pr_merged_branches $branch
                echo "  - $branch (PR merged)"
            end
        end
    else
        echo "  GitHub CLI (gh) not found. Skipping PR check."
    end
    
    # Combine all branches to delete
    set -l branches_to_delete $merged_branches $pr_merged_branches
    
    if test (count $branches_to_delete) -eq 0
        echo
        echo "No branches to delete."
        return 0
    end
    
    # Confirm deletion
    set branches_to_delete (printf '%s\n' $branches_to_delete | sort -u)
    echo
    echo "The following branches will be deleted:"
    for branch in $branches_to_delete
        echo "  - $branch"
    end
    echo
    
    read -l -P "Do you want to delete these branches? (y/N) " confirm
    
    if test "$confirm" = "y" -o "$confirm" = "Y"
        for branch in $branches_to_delete
            echo "Deleting $branch..."
            git branch -D $branch
        end
        echo
        echo "Branches deleted successfully!"
    else
        echo "Deletion cancelled."
    end
end

delete_merged_branches
